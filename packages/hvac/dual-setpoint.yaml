# Dual Setpoint Thermostat Package
# Advanced dual setpoint thermostat functionality for CN105 heat pumps
# Requires cn105.yaml package to be imported first
#
# Import with:
# packages:
#   dual_setpoint: github://brianfeucht/esphome-configs/packages/dual-setpoint.yaml

# Meta thermostat for dual setpoint control
climate:
  - platform: thermostat
    id: meta_thermostat
    name: "${friendly_name} Thermostat"
    sensor: heat_pump_room_temperature
    
    # Default temperatures (can be overridden)
    default_target_temperature_low: 20°C
    default_target_temperature_high: 25°C
    
    # Temperature limits
    min_cooling_off_time: 300s
    min_cooling_run_time: 300s
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_idle_time: 30s
    
    # Deadbands
    cool_deadband: 0.5°C
    heat_deadband: 0.5°C
    
    # Overrun protection
    max_cooling_run_time: 3600s
    max_heating_run_time: 3600s
    
    # Control actions
    cool_action:
      - climate.control:
          id: heat_pump
          mode: COOL
          target_temperature: !lambda |-
            return id(meta_thermostat).target_temperature_high - 2.0;
            
    heat_action:
      - climate.control:
          id: heat_pump
          mode: HEAT
          target_temperature: !lambda |-
            return id(meta_thermostat).target_temperature_low + 2.0;
            
    idle_action:
      - climate.control:
          id: heat_pump
          mode: "OFF"

# Preset configurations for different modes
select:
  - platform: template
    name: "${friendly_name} Preset"
    id: preset_select
    options:
      - "Home"
      - "Away" 
      - "Sleep"
      - "Manual"
    initial_option: "Home"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return x == "Home";'
            then:
              - climate.control:
                  id: meta_thermostat
                  target_temperature_low: 20°C
                  target_temperature_high: 25°C
        - if:
            condition:
              lambda: 'return x == "Away";'
            then:
              - climate.control:
                  id: meta_thermostat
                  target_temperature_low: 18°C
                  target_temperature_high: 27°C
        - if:
            condition:
              lambda: 'return x == "Sleep";'
            then:
              - climate.control:
                  id: meta_thermostat
                  target_temperature_low: 19°C
                  target_temperature_high: 24°C

# Additional sensors for thermostat diagnostics
sensor:
  - platform: template
    name: "${friendly_name} Target Low"
    lambda: 'return id(meta_thermostat).target_temperature_low;'
    unit_of_measurement: "°C"
    device_class: temperature
    
  - platform: template
    name: "${friendly_name} Target High"
    lambda: 'return id(meta_thermostat).target_temperature_high;'
    unit_of_measurement: "°C"
    device_class: temperature

# Text sensors for current state
text_sensor:
  - platform: template
    name: "${friendly_name} Thermostat Action"
    lambda: |-
      if (id(meta_thermostat).action == CLIMATE_ACTION_HEATING) {
        return {"Heating"};
      } else if (id(meta_thermostat).action == CLIMATE_ACTION_COOLING) {
        return {"Cooling"};
      } else if (id(meta_thermostat).action == CLIMATE_ACTION_IDLE) {
        return {"Idle"};
      } else {
        return {"Off"};
      }